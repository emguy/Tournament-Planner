{"name":"Tournament-planner","tagline":"This program keeps track of players and matches in a game tournament (Swiss system) through the PostgreSQL database.","body":"# Tournament Planner\r\nThis program keeps track of players and matches in a game tournament (Swiss\r\nsystem) through the use of a PostgreSQL database.\r\n\r\n## Summary\r\nThis program includes the following:\r\n\r\n1. A database schema for storing data required to generate paired matches in a tournament using the Swiss System.\r\n2. A python module for connecting to database, register/delete/count players, report/delete matches, rank players and create a new Swiss parings.\r\n3. A testing code is also provided for debuging the program and for testing the database.\r\n\r\n## Features\r\n1. The program supports draw games.\r\n2. The program utilizes Opponents Match Win (OMW) scheme to determine the standing and the pairing.\r\n\r\n## Requirements\r\n1. Python 2.7\r\n2. PostgreSQL\r\n\r\n## Database setup\r\n1. Enter the PostgreSQL interactive terminal by typing the following on a Linux shell\r\n\r\n        $ psql\r\n\r\n2. Create a database with name 'tournament' by excuting the following command within the PostgreSQL terminal\r\n\r\n        => CREATE DATABASE tournament;\r\n\r\n3. Connect to the database 'tournament', by excuting \r\n\r\n        => \\connect tournament\r\n\r\n\r\n5. Excute the sql queries from the file 'tournament.sql' by excuting\r\n\r\n        => \\i tournament.sql\r\n\r\n6. To test the APIs of this program, excuting the following on a Linux shell\r\n\r\n        $ python tournament.py\r\n\r\n## API Usages\r\n\r\n#### def connect():\r\nConnect to the PostgreSQL database.  Returns a database connection.\r\n\r\n#### deleteMatches():\r\nRemove all the match records from the database.\r\n\r\n#### def deletePlayers():\r\nRemove all the player records from the database.\r\n\r\n#### def countPlayers():\r\nReturns the number of players currently registered.\r\n\r\n#### def registerPlayer(name):\r\nAdds a player to the tournament database.\r\n\r\nThe database assigns a unique serial id number for the player.  (This\r\nshould be handled by your SQL database schema, not in your Python code.)\r\n\r\nArgs:\r\n  name: the player's full name (need not be unique).\r\n\r\n#### def playerStandings():\r\nReturns a list of the players and their win records, sorted by wins.\r\n\r\nThe first entry in the list should be the player in first place, or a player\r\ntied for first place if there is currently a tie.\r\n\r\nReturns:\r\n  A list of tuples, each of which contains (id, name, wins, matches):\r\n    id: the player's unique id (assigned by the database)\r\n    name: the player's full name (as registered)\r\n    wins: the number of matches the player has won\r\n    matches: the number of matches the player has played\r\n\r\n#### def reportMatch(winner, loser):\r\nRecords the outcome of a single match between two players.\r\n\r\n  Args:\r\n    winner:  the id number of the player who won\r\n    loser:  the id number of the player who lost\r\n\r\n#### def swissPairings():\r\nReturns a list of pairs of players for the next round of a match.\r\n\r\nAssuming that there are an even number of players registered, each player\r\nappears exactly once in the pairings.  Each player is paired with another\r\nplayer with an equal or nearly-equal win record, that is, a player adjacent\r\nto him or her in the standings.\r\n\r\nReturns:\r\n  A list of tuples, each of which contains (id1, name1, id2, name2)\r\n    id1: the first player's unique id\r\n    name1: the first player's name\r\n    id2: the second player's unique id\r\n    name2: the second player's name\r\n\r\nBugs report to Yu Zhang (emguy2000@gmail.com).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}